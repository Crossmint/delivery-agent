"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.7.3";
exports.ids = ["vendor-chunks/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.7.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.7.3/node_modules/@solana/codecs-data-structures/dist/index.node.mjs":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.7.3/node_modules/@solana/codecs-data-structures/dist/index.node.mjs ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertValidNumberOfItemsForCodec: () => (/* binding */ assertValidNumberOfItemsForCodec),\n/* harmony export */   getArrayCodec: () => (/* binding */ getArrayCodec),\n/* harmony export */   getArrayDecoder: () => (/* binding */ getArrayDecoder),\n/* harmony export */   getArrayEncoder: () => (/* binding */ getArrayEncoder),\n/* harmony export */   getBitArrayCodec: () => (/* binding */ getBitArrayCodec),\n/* harmony export */   getBitArrayDecoder: () => (/* binding */ getBitArrayDecoder),\n/* harmony export */   getBitArrayEncoder: () => (/* binding */ getBitArrayEncoder),\n/* harmony export */   getBooleanCodec: () => (/* binding */ getBooleanCodec),\n/* harmony export */   getBooleanDecoder: () => (/* binding */ getBooleanDecoder),\n/* harmony export */   getBooleanEncoder: () => (/* binding */ getBooleanEncoder),\n/* harmony export */   getBytesCodec: () => (/* binding */ getBytesCodec),\n/* harmony export */   getBytesDecoder: () => (/* binding */ getBytesDecoder),\n/* harmony export */   getBytesEncoder: () => (/* binding */ getBytesEncoder),\n/* harmony export */   getConstantCodec: () => (/* binding */ getConstantCodec),\n/* harmony export */   getConstantDecoder: () => (/* binding */ getConstantDecoder),\n/* harmony export */   getConstantEncoder: () => (/* binding */ getConstantEncoder),\n/* harmony export */   getDataEnumCodec: () => (/* binding */ getDataEnumCodec),\n/* harmony export */   getDataEnumDecoder: () => (/* binding */ getDataEnumDecoder),\n/* harmony export */   getDataEnumEncoder: () => (/* binding */ getDataEnumEncoder),\n/* harmony export */   getDiscriminatedUnionCodec: () => (/* binding */ getDiscriminatedUnionCodec),\n/* harmony export */   getDiscriminatedUnionDecoder: () => (/* binding */ getDiscriminatedUnionDecoder),\n/* harmony export */   getDiscriminatedUnionEncoder: () => (/* binding */ getDiscriminatedUnionEncoder),\n/* harmony export */   getEnumCodec: () => (/* binding */ getEnumCodec),\n/* harmony export */   getEnumDecoder: () => (/* binding */ getEnumDecoder),\n/* harmony export */   getEnumEncoder: () => (/* binding */ getEnumEncoder),\n/* harmony export */   getHiddenPrefixCodec: () => (/* binding */ getHiddenPrefixCodec),\n/* harmony export */   getHiddenPrefixDecoder: () => (/* binding */ getHiddenPrefixDecoder),\n/* harmony export */   getHiddenPrefixEncoder: () => (/* binding */ getHiddenPrefixEncoder),\n/* harmony export */   getHiddenSuffixCodec: () => (/* binding */ getHiddenSuffixCodec),\n/* harmony export */   getHiddenSuffixDecoder: () => (/* binding */ getHiddenSuffixDecoder),\n/* harmony export */   getHiddenSuffixEncoder: () => (/* binding */ getHiddenSuffixEncoder),\n/* harmony export */   getMapCodec: () => (/* binding */ getMapCodec),\n/* harmony export */   getMapDecoder: () => (/* binding */ getMapDecoder),\n/* harmony export */   getMapEncoder: () => (/* binding */ getMapEncoder),\n/* harmony export */   getNullableCodec: () => (/* binding */ getNullableCodec),\n/* harmony export */   getNullableDecoder: () => (/* binding */ getNullableDecoder),\n/* harmony export */   getNullableEncoder: () => (/* binding */ getNullableEncoder),\n/* harmony export */   getScalarEnumCodec: () => (/* binding */ getScalarEnumCodec),\n/* harmony export */   getScalarEnumDecoder: () => (/* binding */ getScalarEnumDecoder),\n/* harmony export */   getScalarEnumEncoder: () => (/* binding */ getScalarEnumEncoder),\n/* harmony export */   getSetCodec: () => (/* binding */ getSetCodec),\n/* harmony export */   getSetDecoder: () => (/* binding */ getSetDecoder),\n/* harmony export */   getSetEncoder: () => (/* binding */ getSetEncoder),\n/* harmony export */   getStructCodec: () => (/* binding */ getStructCodec),\n/* harmony export */   getStructDecoder: () => (/* binding */ getStructDecoder),\n/* harmony export */   getStructEncoder: () => (/* binding */ getStructEncoder),\n/* harmony export */   getTupleCodec: () => (/* binding */ getTupleCodec),\n/* harmony export */   getTupleDecoder: () => (/* binding */ getTupleDecoder),\n/* harmony export */   getTupleEncoder: () => (/* binding */ getTupleEncoder),\n/* harmony export */   getUnionCodec: () => (/* binding */ getUnionCodec),\n/* harmony export */   getUnionDecoder: () => (/* binding */ getUnionDecoder),\n/* harmony export */   getUnionEncoder: () => (/* binding */ getUnionEncoder),\n/* harmony export */   getUnitCodec: () => (/* binding */ getUnitCodec),\n/* harmony export */   getUnitDecoder: () => (/* binding */ getUnitDecoder),\n/* harmony export */   getUnitEncoder: () => (/* binding */ getUnitEncoder)\n/* harmony export */ });\n/* harmony import */ var _solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/codecs-core */ \"(rsc)/./node_modules/.pnpm/@solana+codecs-core@2.0.0-rc.1_typescript@5.7.3/node_modules/@solana/codecs-core/dist/index.node.mjs\");\n/* harmony import */ var _solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-numbers */ \"(rsc)/./node_modules/.pnpm/@solana+codecs-numbers@2.0.0-rc.1_typescript@5.7.3/node_modules/@solana/codecs-numbers/dist/index.node.mjs\");\n/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ \"(rsc)/./node_modules/.pnpm/@solana+errors@2.0.0-rc.1_typescript@5.7.3/node_modules/@solana/errors/dist/index.node.mjs\");\n\n\n\n\n// src/array.ts\nfunction assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {\n  if (expected !== actual) {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n      actual,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction maxCodecSizes(sizes) {\n  return sizes.reduce(\n    (all, size) => all === null || size === null ? null : Math.max(all, size),\n    0\n  );\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getFixedSize(codec) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(codec) ? codec.fixedSize : null;\n}\nfunction getMaxSize(codec) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/array.ts\nfunction getArrayEncoder(item, config = {}) {\n  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU32Encoder)();\n  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (array) => {\n        const prefixSize = typeof size === \"object\" ? (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(array.length, size) : 0;\n        return prefixSize + [...array].reduce((all, value) => all + (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value, item), 0);\n      },\n      maxSize\n    },\n    write: (array, bytes, offset) => {\n      if (typeof size === \"number\") {\n        assertValidNumberOfItemsForCodec(\"array\", size, array.length);\n      }\n      if (typeof size === \"object\") {\n        offset = size.write(array.length, bytes, offset);\n      }\n      array.forEach((value) => {\n        offset = item.write(value, bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getArrayDecoder(item, config = {}) {\n  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU32Decoder)();\n  const itemSize = getFixedSize(item);\n  const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize !== null ? { fixedSize } : { maxSize },\n    read: (bytes, offset) => {\n      const array = [];\n      if (typeof size === \"object\" && bytes.slice(offset).length === 0) {\n        return [array, offset];\n      }\n      if (size === \"remainder\") {\n        while (offset < bytes.length) {\n          const [value, newOffset2] = item.read(bytes, offset);\n          offset = newOffset2;\n          array.push(value);\n        }\n        return [array, offset];\n      }\n      const [resolvedSize, newOffset] = typeof size === \"number\" ? [size, offset] : size.read(bytes, offset);\n      offset = newOffset;\n      for (let i = 0; i < resolvedSize; i += 1) {\n        const [value, newOffset2] = item.read(bytes, offset);\n        offset = newOffset2;\n        array.push(value);\n      }\n      return [array, offset];\n    }\n  });\n}\nfunction getArrayCodec(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getArrayEncoder(item, config), getArrayDecoder(item, config));\n}\nfunction computeArrayLikeCodecSize(size, itemSize) {\n  if (typeof size !== \"number\") return null;\n  if (size === 0) return 0;\n  return itemSize === null ? null : itemSize * size;\n}\nfunction getBitArrayEncoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    fixedSize: size,\n    write(value, bytes, offset) {\n      const bytesToAdd = [];\n      for (let i = 0; i < size; i += 1) {\n        let byte = 0;\n        for (let j = 0; j < 8; j += 1) {\n          const feature = Number(value[i * 8 + j] ?? 0);\n          byte |= feature << (backward ? j : 7 - j);\n        }\n        if (backward) {\n          bytesToAdd.unshift(byte);\n        } else {\n          bytesToAdd.push(byte);\n        }\n      }\n      bytes.set(bytesToAdd, offset);\n      return size;\n    }\n  });\n}\nfunction getBitArrayDecoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    fixedSize: size,\n    read(bytes, offset) {\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertByteArrayHasEnoughBytesForCodec)(\"bitArray\", size, bytes, offset);\n      const booleans = [];\n      let slice = bytes.slice(offset, offset + size);\n      slice = backward ? slice.reverse() : slice;\n      slice.forEach((byte) => {\n        for (let i = 0; i < 8; i += 1) {\n          if (backward) {\n            booleans.push(Boolean(byte & 1));\n            byte >>= 1;\n          } else {\n            booleans.push(Boolean(byte & 128));\n            byte <<= 1;\n          }\n        }\n      });\n      return [booleans, offset + size];\n    }\n  });\n}\nfunction getBitArrayCodec(size, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\nfunction getBooleanEncoder(config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)(), (value) => value ? 1 : 0);\n}\nfunction getBooleanDecoder(config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)(), (value) => Number(value) === 1);\n}\nfunction getBooleanCodec(config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBooleanEncoder(config), getBooleanDecoder(config));\n}\nfunction getBytesEncoder() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    getSizeFromValue: (value) => value.length,\n    write: (value, bytes, offset) => {\n      bytes.set(value, offset);\n      return offset + value.length;\n    }\n  });\n}\nfunction getBytesDecoder() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    read: (bytes, offset) => {\n      const slice = bytes.slice(offset);\n      return [slice, offset + slice.length];\n    }\n  });\n}\nfunction getBytesCodec() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBytesEncoder(), getBytesDecoder());\n}\nvar getBase16Decoder = () => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n  read(bytes, offset) {\n    const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n    return [value, bytes.length];\n  }\n});\nfunction getConstantEncoder(constant) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    fixedSize: constant.length,\n    write: (_, bytes, offset) => {\n      bytes.set(constant, offset);\n      return offset + constant.length;\n    }\n  });\n}\nfunction getConstantDecoder(constant) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    fixedSize: constant.length,\n    read: (bytes, offset) => {\n      const base16 = getBase16Decoder();\n      if (!(0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.containsBytes)(bytes, constant, offset)) {\n        throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_CONSTANT, {\n          constant,\n          data: bytes,\n          hexConstant: base16.decode(constant),\n          hexData: base16.decode(bytes),\n          offset\n        });\n      }\n      return [void 0, offset + constant.length];\n    }\n  });\n}\nfunction getConstantCodec(constant) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getConstantEncoder(constant), getConstantDecoder(constant));\n}\nfunction getTupleEncoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => items.map((item, index) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value[index], item)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (value, bytes, offset) => {\n      assertValidNumberOfItemsForCodec(\"tuple\", items.length, value.length);\n      items.forEach((item, index) => {\n        offset = item.write(value[index], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getTupleDecoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const values = [];\n      items.forEach((item) => {\n        const [newValue, newOffset] = item.read(bytes, offset);\n        values.push(newValue);\n        offset = newOffset;\n      });\n      return [values, offset];\n    }\n  });\n}\nfunction getTupleCodec(items) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getTupleEncoder(items),\n    getTupleDecoder(items)\n  );\n}\nfunction getUnionEncoder(variants, getIndexFromValue) {\n  const fixedSize = getUnionFixedSize(variants);\n  const write = (variant, bytes, offset) => {\n    const index = getIndexFromValue(variant);\n    assertValidVariantIndex(variants, index);\n    return variants[index].write(variant, bytes, offset);\n  };\n  if (fixedSize !== null) {\n    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({ fixedSize, write });\n  }\n  const maxSize = getUnionMaxSize(variants);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...maxSize !== null ? { maxSize } : {},\n    getSizeFromValue: (variant) => {\n      const index = getIndexFromValue(variant);\n      assertValidVariantIndex(variants, index);\n      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(variant, variants[index]);\n    },\n    write\n  });\n}\nfunction getUnionDecoder(variants, getIndexFromBytes) {\n  const fixedSize = getUnionFixedSize(variants);\n  const read = (bytes, offset) => {\n    const index = getIndexFromBytes(bytes, offset);\n    assertValidVariantIndex(variants, index);\n    return variants[index].read(bytes, offset);\n  };\n  if (fixedSize !== null) {\n    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({ fixedSize, read });\n  }\n  const maxSize = getUnionMaxSize(variants);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({ ...maxSize !== null ? { maxSize } : {}, read });\n}\nfunction getUnionCodec(variants, getIndexFromValue, getIndexFromBytes) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getUnionEncoder(variants, getIndexFromValue),\n    getUnionDecoder(variants, getIndexFromBytes)\n  );\n}\nfunction assertValidVariantIndex(variants, index) {\n  if (typeof variants[index] === \"undefined\") {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, {\n      maxRange: variants.length - 1,\n      minRange: 0,\n      variant: index\n    });\n  }\n}\nfunction getUnionFixedSize(variants) {\n  if (variants.length === 0) return 0;\n  if (!(0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(variants[0])) return null;\n  const variantSize = variants[0].fixedSize;\n  const sameSizedVariants = variants.every((variant) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(variant) && variant.fixedSize === variantSize);\n  return sameSizedVariants ? variantSize : null;\n}\nfunction getUnionMaxSize(variants) {\n  return maxCodecSizes(variants.map((variant) => getMaxSize(variant)));\n}\n\n// src/discriminated-union.ts\nfunction getDiscriminatedUnionEncoder(variants, config = {}) {\n  const discriminatorProperty = config.discriminator ?? \"__kind\";\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();\n  return getUnionEncoder(\n    variants.map(\n      ([, variant], index) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getTupleEncoder([prefix, variant]), (value) => [index, value])\n    ),\n    (value) => getVariantDiscriminator(variants, value[discriminatorProperty])\n  );\n}\nfunction getDiscriminatedUnionDecoder(variants, config = {}) {\n  const discriminatorProperty = config.discriminator ?? \"__kind\";\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();\n  return getUnionDecoder(\n    variants.map(\n      ([discriminator, variant]) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getTupleDecoder([prefix, variant]), ([, value]) => ({\n        [discriminatorProperty]: discriminator,\n        ...value\n      }))\n    ),\n    (bytes, offset) => Number(prefix.read(bytes, offset)[0])\n  );\n}\nfunction getDiscriminatedUnionCodec(variants, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getDiscriminatedUnionEncoder(variants, config),\n    getDiscriminatedUnionDecoder(variants, config)\n  );\n}\nfunction getVariantDiscriminator(variants, discriminatorValue) {\n  const discriminator = variants.findIndex(([key]) => discriminatorValue === key);\n  if (discriminator < 0) {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, {\n      value: discriminatorValue,\n      variants: variants.map(([key]) => key)\n    });\n  }\n  return discriminator;\n}\nvar getDataEnumEncoder = getDiscriminatedUnionEncoder;\nvar getDataEnumDecoder = getDiscriminatedUnionDecoder;\nvar getDataEnumCodec = getDiscriminatedUnionCodec;\n\n// src/enum-helpers.ts\nfunction getEnumStats(constructor) {\n  const numericalValues = [\n    ...new Set(Object.values(constructor).filter((v) => typeof v === \"number\"))\n  ].sort();\n  const enumRecord = Object.fromEntries(Object.entries(constructor).slice(numericalValues.length));\n  const enumKeys = Object.keys(enumRecord);\n  const enumValues = Object.values(enumRecord);\n  const stringValues = [\n    .../* @__PURE__ */ new Set([...enumKeys, ...enumValues.filter((v) => typeof v === \"string\")])\n  ];\n  return { enumKeys, enumRecord, enumValues, numericalValues, stringValues };\n}\nfunction getEnumIndexFromVariant({\n  enumKeys,\n  enumValues,\n  variant\n}) {\n  const valueIndex = findLastIndex(enumValues, (value) => value === variant);\n  if (valueIndex >= 0) return valueIndex;\n  return enumKeys.findIndex((key) => key === variant);\n}\nfunction getEnumIndexFromDiscriminator({\n  discriminator,\n  enumKeys,\n  enumValues,\n  useValuesAsDiscriminators\n}) {\n  if (!useValuesAsDiscriminators) {\n    return discriminator >= 0 && discriminator < enumKeys.length ? discriminator : -1;\n  }\n  return findLastIndex(enumValues, (value) => value === discriminator);\n}\nfunction findLastIndex(array, predicate) {\n  let l = array.length;\n  while (l--) {\n    if (predicate(array[l], l, array)) return l;\n  }\n  return -1;\n}\nfunction formatNumericalValues(values) {\n  if (values.length === 0) return \"\";\n  let range = [values[0], values[0]];\n  const ranges = [];\n  for (let index = 1; index < values.length; index++) {\n    const value = values[index];\n    if (range[1] + 1 === value) {\n      range[1] = value;\n    } else {\n      ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n      range = [value, value];\n    }\n  }\n  ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);\n  return ranges.join(\", \");\n}\n\n// src/enum.ts\nfunction getEnumEncoder(constructor, config = {}) {\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();\n  const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n  const { enumKeys, enumValues, numericalValues, stringValues } = getEnumStats(constructor);\n  if (useValuesAsDiscriminators && enumValues.some((value) => typeof value === \"string\")) {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n      stringValues: enumValues.filter((v) => typeof v === \"string\")\n    });\n  }\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(prefix, (variant) => {\n    const index = getEnumIndexFromVariant({ enumKeys, enumValues, variant });\n    if (index < 0) {\n      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, {\n        formattedNumericalValues: formatNumericalValues(numericalValues),\n        numericalValues,\n        stringValues,\n        variant\n      });\n    }\n    return useValuesAsDiscriminators ? enumValues[index] : index;\n  });\n}\nfunction getEnumDecoder(constructor, config = {}) {\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();\n  const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;\n  const { enumKeys, enumValues, numericalValues } = getEnumStats(constructor);\n  if (useValuesAsDiscriminators && enumValues.some((value) => typeof value === \"string\")) {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {\n      stringValues: enumValues.filter((v) => typeof v === \"string\")\n    });\n  }\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(prefix, (value) => {\n    const discriminator = Number(value);\n    const index = getEnumIndexFromDiscriminator({\n      discriminator,\n      enumKeys,\n      enumValues,\n      useValuesAsDiscriminators\n    });\n    if (index < 0) {\n      const validDiscriminators = useValuesAsDiscriminators ? numericalValues : [...Array(enumKeys.length).keys()];\n      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n        discriminator,\n        formattedValidDiscriminators: formatNumericalValues(validDiscriminators),\n        validDiscriminators\n      });\n    }\n    return enumValues[index];\n  });\n}\nfunction getEnumCodec(constructor, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getEnumEncoder(constructor, config), getEnumDecoder(constructor, config));\n}\nvar getScalarEnumEncoder = getEnumEncoder;\nvar getScalarEnumDecoder = getEnumDecoder;\nvar getScalarEnumCodec = getEnumCodec;\nfunction getHiddenPrefixEncoder(encoder, prefixedEncoders) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(\n    getTupleEncoder([...prefixedEncoders, encoder]),\n    (value) => [...prefixedEncoders.map(() => void 0), value]\n  );\n}\nfunction getHiddenPrefixDecoder(decoder, prefixedDecoders) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(\n    getTupleDecoder([...prefixedDecoders, decoder]),\n    (tuple) => tuple[tuple.length - 1]\n  );\n}\nfunction getHiddenPrefixCodec(codec, prefixedCodecs) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getHiddenPrefixEncoder(codec, prefixedCodecs), getHiddenPrefixDecoder(codec, prefixedCodecs));\n}\nfunction getHiddenSuffixEncoder(encoder, suffixedEncoders) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(\n    getTupleEncoder([encoder, ...suffixedEncoders]),\n    (value) => [value, ...suffixedEncoders.map(() => void 0)]\n  );\n}\nfunction getHiddenSuffixDecoder(decoder, suffixedDecoders) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(\n    getTupleDecoder([decoder, ...suffixedDecoders]),\n    (tuple) => tuple[0]\n  );\n}\nfunction getHiddenSuffixCodec(codec, suffixedCodecs) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getHiddenSuffixEncoder(codec, suffixedCodecs), getHiddenSuffixDecoder(codec, suffixedCodecs));\n}\nfunction getMapEncoder(key, value, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(\n    getArrayEncoder(getTupleEncoder([key, value]), config),\n    (map) => [...map.entries()]\n  );\n}\nfunction getMapDecoder(key, value, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(\n    getArrayDecoder(getTupleDecoder([key, value]), config),\n    (entries) => new Map(entries)\n  );\n}\nfunction getMapCodec(key, value, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getMapEncoder(key, value, config), getMapDecoder(key, value, config));\n}\nfunction getUnitEncoder() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    fixedSize: 0,\n    write: (_value, _bytes, offset) => offset\n  });\n}\nfunction getUnitDecoder() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    fixedSize: 0,\n    read: (_bytes, offset) => [void 0, offset]\n  });\n}\nfunction getUnitCodec() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getUnitEncoder(), getUnitDecoder());\n}\n\n// src/nullable.ts\nfunction getNullableEncoder(item, config = {}) {\n  const prefix = (() => {\n    if (config.prefix === null) {\n      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getUnitEncoder(), (_boolean) => void 0);\n    }\n    return getBooleanEncoder({ size: config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)() });\n  })();\n  const noneValue = (() => {\n    if (config.noneValue === \"zeroes\") {\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(item);\n      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixEncoderSize)(getUnitEncoder(), item.fixedSize);\n    }\n    if (!config.noneValue) {\n      return getUnitEncoder();\n    }\n    return getConstantEncoder(config.noneValue);\n  })();\n  return getUnionEncoder(\n    [\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getTupleEncoder([prefix, noneValue]), (_value) => [\n        false,\n        void 0\n      ]),\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getTupleEncoder([prefix, item]), (value) => [true, value])\n    ],\n    (variant) => Number(variant !== null)\n  );\n}\nfunction getNullableDecoder(item, config = {}) {\n  const prefix = (() => {\n    if (config.prefix === null) {\n      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getUnitDecoder(), () => false);\n    }\n    return getBooleanDecoder({ size: config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)() });\n  })();\n  const noneValue = (() => {\n    if (config.noneValue === \"zeroes\") {\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(item);\n      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixDecoderSize)(getUnitDecoder(), item.fixedSize);\n    }\n    if (!config.noneValue) {\n      return getUnitDecoder();\n    }\n    return getConstantDecoder(config.noneValue);\n  })();\n  return getUnionDecoder(\n    [\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getTupleDecoder([prefix, noneValue]), () => null),\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getTupleDecoder([prefix, item]), ([, value]) => value)\n    ],\n    (bytes, offset) => {\n      if (config.prefix === null && !config.noneValue) {\n        return Number(offset < bytes.length);\n      }\n      if (config.prefix === null && config.noneValue != null) {\n        const zeroValue = config.noneValue === \"zeroes\" ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;\n        return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.containsBytes)(bytes, zeroValue, offset) ? 0 : 1;\n      }\n      return Number(prefix.read(bytes, offset)[0]);\n    }\n  );\n}\nfunction getNullableCodec(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getNullableEncoder(item, config),\n    getNullableDecoder(item, config)\n  );\n}\nfunction getSetEncoder(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getArrayEncoder(item, config), (set) => [...set]);\n}\nfunction getSetDecoder(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getArrayDecoder(item, config), (entries) => new Set(entries));\n}\nfunction getSetCodec(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getSetEncoder(item, config), getSetDecoder(item, config));\n}\nfunction getStructEncoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => fields.map(([key, codec]) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value[key], codec)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (struct, bytes, offset) => {\n      fields.forEach(([key, codec]) => {\n        offset = codec.write(struct[key], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getStructDecoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const struct = {};\n      fields.forEach(([key, codec]) => {\n        const [value, newOffset] = codec.read(bytes, offset);\n        offset = newOffset;\n        struct[key] = value;\n      });\n      return [struct, offset];\n    }\n  });\n}\nfunction getStructCodec(fields) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getStructEncoder(fields),\n    getStructDecoder(fields)\n  );\n}\n\n\n//# sourceMappingURL=index.node.mjs.map\n//# sourceMappingURL=index.node.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-rc.1_typescript@5.7.3/node_modules/@solana/codecs-data-structures/dist/index.node.mjs\n");

/***/ })

};
;